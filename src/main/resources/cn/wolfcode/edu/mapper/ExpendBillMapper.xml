<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.edu.mapper.ExpendBillMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.edu.domain.ExpendBill" >
    <id column="id" property="id" />
    <result column="pay_time" property="payTime" />
    <result column="pay_money" property="payMoney" />
    <result column="genre" property="genre" />
    <result column="bill_number" property="billNumber" />
    <result column="state" property="state" />
    <!--出纳-->
    <association property="cashier" javaType="cn.wolfcode.edu.domain.Employee">
      <id column="cashier_id" property="id"></id>
      <result column="cashier_realname" property="realname"></result>
    </association>
    <!--审核-->
    <association property="auditor" javaType="cn.wolfcode.edu.domain.Employee">
      <id column="auditor_id" property="id"></id>
      <result column="auditor_realname" property="realname"></result>
    </association>
    <!--支付方式-->
    <association property="payment" javaType="cn.wolfcode.edu.domain.PayMent">
      <id column="p_id" property="id"></id>
      <result column="p_payname" property="payname"></result>
    </association>
    <association property="courseName" javaType="cn.wolfcode.edu.domain.CourseName">
      <id column="cou_id" property="id"></id>
      <result column="cou_name" property="name"></result>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from `expendbill`
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="cn.wolfcode.edu.domain.ExpendBill" useGeneratedKeys="true" keyProperty="id" >
    insert into `expendbill` (pay_time, pay_money, cashier_id, auditor_id, payment_id, genre,
      bill_number, coursename_id, state)
    values (#{payTime}, #{payMoney}, #{cashier.id}, #{auditor.id}, #{payment.id}, #{genre},
      #{billNumber}, #{courseName.id}, #{state})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.edu.domain.ExpendBill" >
    update `expendbill`
    set pay_time = #{payTime},
      pay_money = #{payMoney},
      cashier_id = #{cashier.id},
      auditor_id = #{auditor.id},
      payment_id = #{payment.id},
      genre = #{genre},
      bill_number = #{billNumber},
      coursename_id = #{courseName.id},
      state = #{state}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select e.id, e.pay_time, e.pay_money, e.genre, e.bill_number, e.state,
    cashier.id cashier_id, cashier.realname cashier_realname,
    auditor.id auditor_id, auditor.realname auditor_realname,
    p.id p_id, p.payname p_payname,
    cou.id cou_id, cou.name cou_name
    from `expendbill` e
    left join employee cashier on e.cashier_id = cashier.id
    left join employee auditor on e.cashier_id = auditor.id
    left join payment p on e.payment_id = p.id
    left join coursename cou on e.coursename_id = cou.id
    where e.id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select e.id, e.pay_time, e.pay_money, e.genre, e.bill_number, e.state,
    cashier.id cashier_id, cashier.realname cashier_realname,
    auditor.id auditor_id, auditor.realname auditor_realname,
    p.id p_id, p.payname p_payname
    cou.id cou_id, cou.name cou_name
    from `expendbill` e
    left join employee cashier on e.cashier_id = cashier.id
    left join employee auditor on e.cashier_id = auditor.id
    left join payment p on e.payment_id = p.id
    left join coursename cou on e.coursename_id = cou.id
  </select>

  <select id="queryForCount" resultType="int">
    select count(e.id)
    from `expendbill` e
    left join employee cashier on e.cashier_id = cashier.id
    left join employee auditor on e.cashier_id = auditor.id
    left join payment p on e.payment_id = p.id
    left join coursename cou on e.coursename_id = cou.id
    <include refid="BASE_WHERE"></include>
  </select>

  <select id="queryForList" resultMap="BaseResultMap">
    select e.id, e.pay_time, e.pay_money, e.genre, e.bill_number, e.state,
    cashier.id cashier_id, cashier.realname cashier_realname,
    auditor.id auditor_id, auditor.realname auditor_realname,
    p.id p_id, p.payname p_payname,
    cou.id cou_id, cou.name cou_name
    from `expendbill` e
    left join employee cashier on e.cashier_id = cashier.id
    left join employee auditor on e.cashier_id = auditor.id
    left join payment p on e.payment_id = p.id
    left join coursename cou on e.coursename_id = cou.id
    <include refid="BASE_WHERE"></include>

    limit #{startIndex},#{rows}
  </select>

  <sql id="BASE_WHERE">
    <where>
      <if test="keyword != null">
        and (e.affiliation_subject LIKE concat("%",#{keyword},"%") or e.genre LIKE concat("%",#{keyword},"%"))
      </if>
      <if test="begindate != null">
        and e.pay_time >= #{begindate}
      </if>
      <if test="enddate != null">
        and e.pay_time &lt;= #{enddate}
      </if>
    </where>
  </sql>
</mapper>